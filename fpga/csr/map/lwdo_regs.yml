# NOTE NOTE NOTE
# All addresses here are _byte_ addresses.
# In LWDO-SDR design, Wishbone addresses are _word_ addresses.

register_blocks:
  - name: lwdo_regs # this is the name of generated verilog module
    byte_size: 512  # up to 256 * 16-bit registers

    register_files:
    # ------------------------------------------------------
    #                 SYS - system control
    # ------------------------------------------------------
    - name: sys
      offset_address: 0x00

      registers:
      - name: magic
        comment: "Read-only magic value"
        bit_fields:
        - name: magic
          bit_assignment: { width: 32 }
          type: rof
          initial_value: 0x4544574C # 'LWDO'

      - name: version
        comment: "Register file version"
        bit_fields:
        - name: major
          bit_assignment: { width: 16 }
          type: rof
          # NOTE!
          # THIS VALUE MUST BE INCREMENTED EVERY TIME
          # REGISTERS MAP IS CHANGED IN NON-BACKWARDS-COMPATIBLE MANNER
          initial_value: 1

        - name: minor
          bit_assignment: { width: 16 }
          type: rof
          # NOTE
          # This value may be incremented whenever register file is extended
          # in backwards-compatible manner. Reset to 0 when `major` increments.
          initial_value: 1

      - name: con
        comment: "System-level control bits"
        bit_fields:
        - name: sys_rst
          comment: "write 1 to perform complete system reset"
          bit_assignment: { width: 1 }
          type: w1
          initial_value: 0

      - name: pll
        comment: "Read-only PLL configuration bits (for host to compute sys_clk)"
        bit_fields:
        - name: divr
          bit_assignment: { width: 4 }
          type: rof
          initial_value: { default: 0 }
        - name: divf
          bit_assignment: { width: 7 }
          type: rof
          initial_value: { default: 0 }
        - name: divq
          bit_assignment: { width: 3 }
          type: rof
          initial_value: { default: 0 }

    # ------------------------------------------------------
    #                 PDET - phase detector
    # ------------------------------------------------------
    - name: pdet
      offset_address: 0x20

      registers:
      - name: con
        comment: "Phase detector control"

        bit_fields:
        - name: en
          comment: "Enable phase detector"
          bit_assignment: { width: 1 }
          type: rw
          initial_value: 0

        - name: eclk2_slow
          comment: "ECLK2 is slow (1Hz ~ 10Hz). If set, N2 divider is bypassed and fTIC2=fECLK2"
          bit_assignment: { width: 1 }
          type: rw
          initial_value: 0

      - name: n1
        comment: "N1 divider"

        bit_fields:
        - name: val
          comment: "Clock frequency division factor for N1 divider. fTIC1=fECLK1/(2*(val+1))"
          bit_assignment: { width: 32 }
          type: rof
          initial_value: { default: 0 }

      - name: n2
        comment: "N2 divider"

        bit_fields:
        - name: val
          comment: "Clock frequency division factor for N2 divider. fTIC2=fECLK2/(2*(val+1))"
          bit_assignment: { width: 32 }
          type: rof
          initial_value: { default: 0 }

    # ------------------------------------------------------
    #     ADCT - analog-to-digital converter timing
    # ------------------------------------------------------
    - name: adct
      offset_address: 0x40
      comment: "ADC timing circuitry controls"

      registers:
      - name: con
        comment: "Common enable/disable bits"

        bit_fields:
        - name: srate1_en
          comment: "Enable sample rate generator 1"
          bit_assignment: { width: 1 }
          type: rw
          initial_value: 0

        - name: srate2_en
          comment: "Enable sample rate generator 2"
          bit_assignment: { width: 1 }
          type: rw
          initial_value: 0

        - name: puls1_en
          comment: "Enable pulse generator 1"
          bit_assignment: { width: 1 }
          type: rw
          initial_value: 0

        - name: puls2_en
          comment: "Enable pulse generator 2"
          bit_assignment: { width: 1 }
          type: rw
          initial_value: 0

      - name: srate1_psc_div
        comment: "Sample rate generator 1 prescaler division factor"
        bit_fields:
        - name: val
          comment: "Clock frequency division factor for sample rate generator 1. fSRATE1=fSYSCLK/(val+1)"
          bit_assignment: { width: 8 }
          type: rw
          initial_value: 199

      - name: srate2_psc_div
        comment: "Sample rate generator 2 prescaler division factor"
        bit_fields:
        - name: val
          comment: "Clock frequency division factor for sample rate generator 2. fSRATE2=fSYSCLK/(val+1)"
          bit_assignment: { width: 8 }
          type: rw
          initial_value: 199

      - name: puls1_psc_div
        comment: "Pulse generator 1 prescaler division factor"
        bit_fields:
        - name: val
          comment: "Clock frequency division factor for pulse generator 1. fPULS1=fSRATE1/(val+1)"
          bit_assignment: { width: 23 }
          type: rw
          initial_value: 0

      - name: puls2_psc_div
        comment: "Pulse generator 2 prescaler division factor"
        bit_fields:
        - name: val
          comment: "Clock frequency division factor for pulse generator 2. fPULS2=fSRATE2/(val+1)"
          bit_assignment: { width: 23 }
          type: rw
          initial_value: 0

      - name: puls1_dly
        comment: "Pulse generator 1 micro-delay control"
        bit_fields:
        - name: val
          comment: "Delay for pulse generator 1 output, number of SYSCLK cycles. Tdelay=(val+1)/fSYSCLK"
          bit_assignment: { width: 9 }
          type: rw
          initial_value: 0

      - name: puls2_dly
        comment: "Pulse generator 2 micro-delay control"
        bit_fields:
        - name: val
          comment: "Delay for pulse generator 2 output, number of SYSCLK cycles. Tdelay=(val+1)/fSYSCLK"
          bit_assignment: { width: 9 }
          type: rw
          initial_value: 0

      - name: puls1_pwidth
        comment: "Pulse generator 1 pulse width control"
        bit_fields:
        - name: val
          comment: "Pulse width for pulse generator 1 output, number of SRATE1 cycles. Tpulse=val/fSRATE1"
          bit_assignment: { width: 16 }
          type: rw
          initial_value: 1

      - name: puls2_pwidth
        comment: "Pulse generator 2 pulse width control"
        bit_fields:
        - name: val
          comment: "Pulse width for pulse generator 2 output, number of SRATE2 cycles. Tpulse=val/fSRATE2"
          bit_assignment: { width: 16 }
          type: rw
          initial_value: 1

    # ------------------------------------------------------
    #   ADC - analog-to-digital converter control
    # ------------------------------------------------------
    - name: adc
      offset_address: 0x80
      comment: "ADC control and data access"

      registers:
      - name: con
        comment: "ADC control"

        bit_fields:
        - name: adc1_en
          comment: "Enable ADC1"
          bit_assignment: { width: 1 }
          type: rw
          initial_value: 0

        - name: adc2_en
          comment: "Enable ADC2"
          bit_assignment: { width: 1 }
          type: rw
          initial_value: 0


      - name: fifo1_sts
        comment: "ADC1 FIFO status"

        bit_fields:
        - name: empty
          comment: "FIFO is empty"
          bit_assignment: { width: 1 }
          type: ro

        - name: full
          comment: "FIFO is full"
          bit_assignment: { width: 1 }
          type: ro

        - name: hfull
          comment: "FIFO is half-full"
          bit_assignment: { width: 1 }
          type: ro

        - name: ovfl
          comment: "FIFO has overflown (sticky bit, read to clear)"
          bit_assignment: { width: 1 }
          type: rotrg

        - name: udfl
          comment: "FIFO has underflown (sticky bit, read to clear)"
          bit_assignment: { width: 1 }
          type: rotrg

      - name: fifo2_sts
        comment: "ADC2 FIFO status"

        bit_fields:
        - name: empty
          comment: "FIFO is empty"
          bit_assignment: { width: 1 }
          type: ro

        - name: full
          comment: "FIFO is full"
          bit_assignment: { width: 1 }
          type: ro

        - name: hfull
          comment: "FIFO is half-full"
          bit_assignment: { width: 1 }
          type: ro

        - name: ovfl
          comment: "FIFO has overflown (sticky bit, read to clear)"
          bit_assignment: { width: 1 }
          type: rotrg

        - name: udfl
          comment: "FIFO has underflown (sticky bit, read to clear)"
          bit_assignment: { width: 1 }
          type: rotrg

    # ------------------------------------------------------
    #   FTUN - frequency oscillator tuning
    # ------------------------------------------------------
    - name: ftun
      offset_address: 0xA0
      comment: "Frequency oscillator tuning"

      registers:
      - name: vtune_set
        comment: "VCTCXO DAC control"

        bit_fields:
        - name: val
          comment: "VCTCXO DAC setting (linear scale, higher value -> higher frequency)"
          bit_assignment: { lsb: 0, width: 16 }
          type: rwtrg
          initial_value: 0x8000

    # ------------------------------------------------------
    #   TEST - test registers
    # ------------------------------------------------------
    - name: test
      offset_address: 0x1F0
      comment: "Registers allocated for test purposes"

      registers:
      - name: rw1
        bit_fields:
        - name: val
          bit_assignment: { width: 16 }
          type: rw
          initial_value: 0

      - name: ro1
        bit_fields:
        - name: val
          bit_assignment: { width: 16 }
          type: rof
          initial_value: 0xFFff

      - name: ro2
        bit_fields:
        - name: val
          bit_assignment: { width: 16 }
          type: rof
          initial_value: 0x0000

      - name: ro3
        bit_fields:
        - name: val
          bit_assignment: { width: 32 }
          type: rof
          initial_value: 0xAAaaAA55

      - name: ro4
        bit_fields:
        - name: val
          bit_assignment: { width: 32 }
          type: rof
          initial_value: 0x55aa5555
